
var uploadHBR = function () {
    var e,
            a = 6,
            t = "...",
            n = "Clique ou arraste aqui uma foto",
            i = "Clique aqui para remover a foto",
            s = "fa fa-camera-retro", d = "fa fa-times",
            r = ["image/jpeg", "image/png"],
            o = 0;
    function l(a) {
        var t = $(a).attr("data-index");
        $(e + " #base64_" + t).val(""), $(e + " #new_" + t).removeClass("hidden"), $(e + " #prev_" + t).addClass("hidden"), $(e + " #prev_" + t).find("img").attr("src", ""), $(a).find(".uploadArea").removeClass("selected"), $(a).removeClass("selected")
    }
    function c() {
        var a = null, t = document.querySelectorAll("#columns .column");
        function n(a, t) {
            var n = new FileReader;
            n.onload = function (a) {
                $(e + " #prev_" + t).find("img").attr("src", a.target.result), $(e + " #prev_" + t).removeClass("hidden"), $(e + " #new_" + t).addClass("hidden"), $(e + " #base64_" + t).val(a.target.result).change()
            }, n.readAsDataURL(a)
        }
        function i(a) {
            var t = 0;
            $.each(a, function (a, i) {
                $.each(r, function (s, d) {
                    if (void 0 !== $(e + " #base64_" + a).val() && d === i.type)
                        if (parseInt($(e + " #base64_" + a).val().length) > 0)
                            for (var r = 0, o = t + 1; o < $(e + ' input[name*="base"]').length; o++)
                                r || 0 !== parseInt($(e + " #base64_" + o).val().length) || (n(i, o), t = o, r++);
                        else
                            n(i, a)
                })
            })
        }
        function s() {
            $(e + " .remove").click(function () {
                l(this)
            }), $(e + " .new").click(function () {
                document.getElementById("hidden_" + $(this).attr("data-index")).click()
            }), $(e + " .fileHidden").change(function () {
                i(this.files)
            }), $(e + " .uploadArea").on("dragend", function () {
                $(this).removeClass("selected")
            }), $(e + " .uploadArea").on("dragleave", function () {
                $(this).removeClass("selected")
            }), $(e + " .uploadArea").on("dragstart", function () {
                $(this).addClass("selected")
            }), $(e + " .uploadArea").on("dragover", function (e) {
                e.preventDefault(), e.stopPropagation(), $(this).addClass("selected")
            }), $(e + " .uploadArea").on("dragenter", function (e) {
                e.preventDefault(), e.stopPropagation(), $(this).addClass("selected")
            }), $(e + " .uploadArea").on("drop", function (e) {
                $(this).removeClass("selected"), e.originalEvent.dataTransfer && e.originalEvent.dataTransfer.files.length && (e.preventDefault(), e.stopPropagation(), i(e.originalEvent.dataTransfer.files))
            })
        }
        function d(a) {
            return a.preventDefault && a.preventDefault(), $(e + " .column").css("opacity", 1), $(this).find(".uploadArea").addClass("selected"), a.dataTransfer.dropEffect = "move", !1
        }
        function o(e) {
            [].forEach.call(t, function (e) {
                e.classList.remove("over")
            })
        }
        function c(e) {
            this.classList.add("over"), e.preventDefault(), e.stopPropagation()
        }
        function u(a) {
            this.classList.remove("over"), $(e + " .uploadArea").removeClass("selected")
        }
        function f(e) {
            this.style.opacity = "0.4", a = this, e.dataTransfer.effectAllowed = "move", e.dataTransfer.setData("text/html", this.innerHTML)
        }
        function v(t) {
            t.stopPropagation && t.stopPropagation(), null !== a && a !== this && (a.innerHTML = this.innerHTML, this.innerHTML = t.dataTransfer.getData("text/html"), $(e + " .uploadArea").removeClass("selected"), $(e + " .column").css("opacity", 1)), s()
        }
        [].forEach.call(t, function (e) {
            e.addEventListener("dragstart", f, !1), e.addEventListener("dragenter", c, !1), e.addEventListener("dragover", d, !1), e.addEventListener("dragleave", u, !1), e.addEventListener("drop", v, !1), e.addEventListener("dragend", o, !1)
        }), s()
    }
    return{init: function (l) {
            Modernizr.draganddrop ? (void 0 !== l.max && (a = parseInt(l.max)), void 0 !== l.textNew && (t = l.textNew), void 0 !== l.textTitle && (n = l.textTitle), void 0 !== l.textTitle && (n = l.textTitle), void 0 !== l.mimes && (r = l.mimes), void 0 !== l.start && (o = l.start), function (l) {
                e = l.target;
                var c, u, f = $(l.target);
                if (f.length > 0)
                    for (f.html(""); o < a; o++)
                        f.append((c = o, u = r.join(","), '<div class="box-drag column" draggable="true">\n\
<input type="hidden" name="base[]" id="base64_' + c + '" data-id="' + c + '">\n\
<div class="form-group">\n\
<div class="w3-col m12 no-padding uploadArea" data-index="' + c + '">\n\
<span class="new" id="new_' + c + '" title="' + n + '" data-index="' + c + '">\n\
<input type="file" class="fileHidden hidden" multiple accept="' + u + '" id="hidden_' + c + '" data-index="' + c + '">\n\
<i class="' + s + '"></i>\n\
<p>' + t + '</p>\n\
</span><span class="image-preview hidden" id="prev_' + c + '">\n\
<div class="remove" title="' + i + '" data-index="' + c + '">\n\
<i class="' + d + '"></i>\n\
</div>\n\
<img class="img-responsive" src="">\n\
</span>\n\
</div>\n\
</div>\n\
</div>'));
                else
                    console.log("Target not found : " + l.target)
            }(l), c()) : console.log("Modernizr not enabled")
        }, reset: function (e) {
            var a = $(e);
            a.length > 0 ? $.each($(a).find(".uploadArea"), function (e, a) {
                l(this)
            }) : console.log("Target not found : " + e)
        }}
}();